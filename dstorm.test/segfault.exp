begin_test_suite
dstorm_attach
global have_test_plugin
global have_signal_handling

set test "segfault in announcement"

if { $have_test_plugin == 1 && $have_signal_handling == 1 } {

global SegFaultNode
set SegFaultNode ""

proc initialize_segfault_exp {} {
    global SegFaultNode
    global testcase_target
    send "cmd 45 "
    set_input_file "${testcase_target}empty.stm"
    send "in Car in Engine in rapidSTORM in GuessAmplitudeThreshold in value set false\n"
    send "in Car in Engine in rapidSTORM in AmplitudeThreshold in value set 1000\n"
    send "cmd 46 in Car in Output in EngineOutput in ChooseTransmission in value set SegFault\n"
    send "cmd 47 in Car in Output in EngineOutput in ChooseTransmission in value set Verbose\n"

    set SegFaultNode [get_next_output_node_name "SegFault output added"]
    if { $SegFaultNode == "" } { exit 1; }
}

proc do_restart {} {
    global have_process_watcher
    if { $have_process_watcher != 1 } {
        wait;
        expect_before;
        expect_after;
        initialize;
    } else { 
        send "nop\n"
        set test "Process terminated correctly"
        expect {
            -re "PROCESS TERMINATED WITH EXIT CODE " { pass "$test" }
        }
    }
    dstorm_attach
    initialize_segfault_exp; 
}

initialize_segfault_exp
set restart 0

send "in Car in Output in EngineOutput in $SegFaultNode in SegFault in OnAnnouncement in value set true\n"
send "in Car in Run in value set 1\n"
expect {
    -re "Verbose plugin got announcement" { fail "$test" }
    -re "Terminating job" { pass "$test" }
    -re "Job \[0-9\]* failed.*segmentation fault" { pass "$test" }
    -re "clear" { pass "$test"; set restart 1; }
}
if { $restart == 1 } { 
    do_restart
    set restart 0;
}
send "in Car in Output in EngineOutput in $SegFaultNode in SegFault in OnAnnouncement in value set false\n"

wait_for_jobs

set test "segfault in construction"
send "in Car in Output in EngineOutput in $SegFaultNode in SegFault in OnConstruction in value set true\n"
send "in Car in Run in value set 1\n"
expect {
    -re "Terminating program" { fail "$test" }
    -re "Constructed verbose plugin" { fail "$test" }
    -re "not perform action.*segmentation fault" { pass "$test" }
    -re "Starting job failed.*segmentation fault" { pass "$test" }
    -re "clear" { pass "$test"; set restart 1; }
}
if { $restart == 1 } { 
    do_restart
    set restart 0;
}
send "in Car in Output in EngineOutput in $SegFaultNode in SegFault in OnConstruction in value set false\n"

set test "able to continue after segfault in construction"
send "in Car in CPUNumber in value set 1\n"
send "in Car in Output in EngineOutput in $SegFaultNode in SegFault in OnImageNumber in value set 3\n"
send "in Car in Run in value set 1\n"
expect {
    -re "Verbose plugin got .* for 0 fr" { pass "$test" }
    -re "egmentation fault" { fail "$test" }
}

#set test "survive segfault in destructor"
#send "in Car in Engine in CPUNumber in value set 1\n"
#send "in Car in Output in EngineOutput in $SegFaultNode in SegFault in OnImageNumber in value set 3\n"
#send "in Car in Output in EngineOutput in $SegFaultNode in SegFault in OnDestruction in value set true\n"
#send "in Car in Run in value set 1\n"
#expect {
    #-re "Verbose plugin got results for 0" { pass "$test" }
    #-re "egmentation fault" { fail "$test" }
#}

set test "segfault during job"
expect {
    -re "Terminating job" { pass "$test" }
    -re "Error in computation" { pass "$test" }
    -re "clear" { pass "$test"; set restart 1; }
    -re "Running emergency handler" { pass "$test"; }
    -re "Verbose plugin got results for 4" { fail "$test" }
}
if { $restart == 1 } { 
    do_restart;
    set restart 0;
}

untested "segfault in n-th working thread"

} else {
    unsupported "Checking segmentation fault behaviour"
}

end_test_suite
