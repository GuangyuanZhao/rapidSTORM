load_generic_config "unix"
global prefix
global stage_dir
global extra_stage_dir
global rapidstorm_plugindir
load_lib install-dirs.exp
global generation

global board_hostname
global board_username
global board_password

global tmpdir_host
global tmpdir_target
global workspace_host
global workspace_target
global testcase_target
global testcase_host
global may_use_camera

set may_use_camera 0

proc to_stage_dir { path } {
    global prefix
    global deploy_root_host
    if { [string first "$prefix" "$path"] != 0 } {
        puts "Path $path is not in prefix $prefix"
        exit 2
    }
    return [string replace "$path" 0 [expr [string length "$prefix"]-1] "$deploy_root_host" ];
}

proc to_remote_host { path } {
    load_lib install-dirs.exp
    set remote_mount_host "/srv/rapidSTORM-dev/test-tree"
    set remote_mount_target "Z:/"

    if { [string first "$remote_mount_host" "$path"] != 0 } {
        puts "Path $path is not in prefix $remote_mount_host"
        exit 2
    }
    set slashes [string replace "$path" 0 [string length "$remote_mount_host"] "$remote_mount_target" ];
    return [string map {"/" "\\"} "$slashes" ];
}

global deploy_root_host
set deploy_root_host "$stage_dir/usr"
global deploy_root_target
set deploy_root_target [to_remote_host "$deploy_root_host"]

set tmpdir_host "/srv/rapidSTORM-dev/$board_hostname-tmpdir/"
set tmpdir_target "C:\\rapidstorm_temp\\"
set testcase_host "$testcase_dir/"
set testcase_target [to_remote_host "$testcase_host"]
set workspace_host "${testcase_host}Sample_Workspace_dSTORM/"
set workspace_target [to_remote_host "$workspace_host"]

proc program_start { pkg cmd args } {
    global stage_dir
    global deploy_root_target
    global deploy_root_host
    global spawn_id
    global VERSION
    global env
    global tmpdir_host
    global tmpdir_target
    global rapidstorm_plugindir
    global generation
    global extra_stage_dir

    global board_hostname
    global board_username
    global board_password

    global host_was_autobooted

    if { [catch { exec -- ping -c 1 "$board_hostname" } output] == 0 } {
        puts "Host $board_hostname is already up"
        set host_was_autobooted 0
    } else {
        exec -- sudo /etc/init.d/$board_hostname start
        set pingable 0
        set last 20
        for { set i 1 } { $i <= $last } { incr i } {
            sleep $i
            if { [catch { exec -- ping -c 1 "$board_hostname" } output] == 0 } {
                puts "Host $board_hostname is up, giving it time to settle"
                set pingable 1
                sleep 20
                puts "Settlement time is up, going to work"
                break
            }
        }
        if { $pingable == 0 } {
            catch { sudo /etc/init.d/$board_hostname stop } nevermind
            puts "Host $board_hostname could not be brought up"
            exit 1
        }
        set host_was_autobooted 1
    }
    catch { exec -- umount "$tmpdir_host" } nevermind
    exec -- mount "$tmpdir_host"
    spawn telnet -E -l $board_username $board_hostname
    expect "password: "
    send "$board_password\r\n"
    expect ">"
    send "@echo off\r\n"
    send "net use Z: \\\\vboxsvr\\test-tree\r\n"
    send "set RAPIDSTORM_TESTPLUGIN_ENABLE=1\r\n"
    if { [info exists env(SETUP_COMMAND)] } {
        set last 10
        file copy -force "$env(SETUP_COMMAND)" "${tmpdir_host}setup.exe"
        #puts "Uninstalling"
        #send "IF EXIST %ProgramFiles%\\unins000.exe %ProgramFiles%\\unins000.exe /VERYSILENT /SUPPRESSMESSAGEBOXES /LOG=\"$tmpdir_target\\setup-logfile\"\r\n"
        #for { set i 1 } { $i <= $last } { incr i } {
            #sleep $i
            #if { [catch { exec -- grep "Log closed." "$tmpdir_host/setup-logfile" } output] == 0 } {
                #print "Grepped output for $output"
                #break
            #}
        #}
        puts "Installing"
        send "${tmpdir_target}setup.exe /VERYSILENT /SP- /COMPONENTS=\"readsif,locprec,test\" /LOG=\"$tmpdir_target\\setup-logfile\"\r\n"
        for { set i 1 } { $i <= $last } { incr i } {
            sleep $i
            if { [catch { exec -- grep "Log closed." "$tmpdir_host/setup-logfile" } output] == 0 } {
                print "Grepped output for $output"
                break
            }
        }
        sleep 1
        send "Z:\\nc.exe -l -p 1111 -v -e \"%ProgramFiles%\\Java\\jre6\\bin\\java.exe -jar %ProgramFiles%\\rapidstorm\\share\\java\\rapidSTORM$generation.jar --no-gui --no-load-config\"\r\n"
        sleep 1
    } else {
        if { [string equal "$extra_stage_dir" ""] == 0 } {
            puts "Staging testing files to $deploy_root_host"
            exec rsync -auv "$extra_stage_dir/" "$deploy_root_host"
            puts "Staged testing files"
        }

        send "set RAPIDSTORM_DIR=$deploy_root_target\r\n"
        send "set RAPIDSTORM_START_DIR=%RAPIDSTORM_DIR%\r\n"
        send "set MAGICK_CONFIGURE_PATH=%RAPIDSTORM_DIR%\\share\\GraphicsMagick-1.3.12\\config;%RAPIDSTORM_DIR%\\lib\\GraphicsMagick-1.3.12\\config\r\n"
        send [to_remote_host [to_stage_dir "$rapidstorm_plugindir"]]
        send "\r\n"
        if { [info exists env(GDB_PORT)] } {
            send "Z:\\nc.exe -l -p 1111 -v -e \"Z:\\gdbserver.exe :$env(GDB_PORT) %RAPIDSTORM_DIR%\\bin\\$cmd $args\"\r\n"
        } else {
            send "Z:\\nc.exe -d -l -p 1111 -v -e \"%RAPIDSTORM_DIR%\\bin\\$cmd $args\"\r\n"
        }
    }
    set telnet_spawn_id $spawn_id
    expect "listening"
    spawn netcat -vv $board_hostname  1111
    set netcat_spawn_id $spawn_id
    sleep 1
    expect {
        -i $telnet_spawn_id -re "FOOBARBAZ" {}
        -i $netcat_spawn_id -re "^#" {}
    }
}


proc program_exit { cmd } {
    global tmpdir_host
    global board_hostname
    global host_was_autobooted

    exec -- umount "$tmpdir_host"
    if { $host_was_autobooted == 1 } {
        catch { exec -- sudo /etc/init.d/$board_hostname stop } nevermind
    }
}
