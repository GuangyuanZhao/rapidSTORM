<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" >

<book>
  <preface id="help_on_help">
    <title>Help on Help</title>
    <para>This help file consists of four chapters: The help topics
      that are grouped in the part <xref linkend="UI"/> describe
      the dialogs and windows of this software. Each page starts with a
      general overview over the page and then details the control elements
      for the window. For more information about the methods and algorithms
      please follow the links under <navel>Related topics</navel>. At the
      end of each chapter documentation, a table follows which shortly
      explains the control elements of the window.</para>
    <para>Tutorials are gathered in the part 
      <xref linkend="Step_by_Step"/>. The
      chapters of this part are arranged as series. A series starts
      with a help page that introduces the method to be explained. The
      following pages contain a step by step outline on how to apply the
      method. The browse buttons (<navel>Previous</navel> and
      <navel>Next</navel>) that are located on the upper right side of
      the title chapter can be used to navigate through the series. The
      button <navel>Up</navel> brings you back to a tutorial overview.</para>
    <para>The various input and output modules are documented in the
      <xref linkend="References"/> part, grouped by purpose.</para>
    <para>Acronyms, abbreviations and technical terms are explained in the 
      <xref linkend="Fundamentals"/> part. If a term is underlined,
      clicking on this term will bring up a short description or explanation.
      If you would like to learn about the underlying theory or about the
      more sophisticated aspects of the rapidSTORM software, please refer
      to pages from this part, too. In some cases we also refer to some
      selected publications, which are listed in the <xref 
      linkend="Bibliography"/> chapter. Some of them are linked as PDF file
      and will directly open the external PDF reader if installed on your
      computer.</para>
  </preface>
  
  <part id="UI">
    <title>User interface</title>

    <para>The graphical user interface for rapidSTORM consists of two
       windows: The <xref linkend="configuration_window"/>
       is used to set the parameters for dSTORM processing
       and monitor the progress of computation. The 
       <indexterm><primary>configuration window</primary></indexterm>
       configuration window
       is opened when rapidSTORM is started. The second window is the
       <xref linkend="image_window"/>, which shows the current dSTORM result
       image and allows the user to scroll and zoom the image.</para>

    <chapter id="configuration_window">
      <title>Configuration window</title>
      <para>The <indexterm><primary>configuration window</primary></indexterm>
        configuration window is the main window of rapidSTORM
        and consists of three parts: From top to bottom, there is the
        menu bar, the job bar and the configuration area.</para>
      <para>The latter is the area that takes up most of the screen and contains
        a number of configuration items, which are text fields or drop-down
        boxes used to set the rapidSTORM parameters. While the meaning of these
        boxes is explained later in this chapter, their operation is 
        standardized. The text fields allow to enter texts or, in most cases,
        numbers. If the field is meant for a filename, a select button
        is provided next to the text field, and the user may also drag and
        drop files to the field. If the field is numeric and has known limits,
        a slider is shown next to it; operating the slider or turning the
        mouse wheel can be used to change the field's value.</para>
      <para>The rest of this chapter will define the meaning of the fields.
       It starts with an explanation of the job
       concept and the job bar and continue with the
       different views in the configuration area and the menu bar.</para>
      <section>
        <title>rapidSTORM jobs</title>
        <para>Each file or direct acquisition processed with rapidSTORM,
          together with the computation options used for it, is
          called a <indexterm><primary>job</primary></indexterm>job in
          rapidSTORM
          parlance. Jobs are computed independently from each other, and
          you can have multiple jobs open at once if your computer memory
          permits. The currently open jobs are displayed in
          the <indexterm><primary>job bar</primary></indexterm>job bar near
          the top of the configuration window.</para>
        <para>The job bar is also used to select which job's status to show.
          Click on a tab to change the currently visible job.</para>
      </section>
      <section>
        <title>The job options tab</title>
        <para><indexterm><primary>job options</primary></indexterm>
           When the rapidSTORM program is started, one tab in the job bar
           called "job options" is already present. This tab does not represent
           a job, but rather displays the configuration options for new jobs.
           </para>
        <para>When the job option tab is selected, the configuration area
          consists of four major elements:</para>
          <orderedlist>
            <listitem><para>The <xref linkend="input_options"/> box is used to 
              configure the input parameters such as input file name, region of
              interest or camera parameters for direct acquisition.</para>
              </listitem>
            <listitem><para>The <xref linkend="processing_options"/> box
              used to control the extraction of
              fluorophore <xref linkend="localization"/>s
              from the input. Typical options here are the amplitude threshold
              used to separate <xref linkend="localization"/>s from noise
              or the smoothing method used for spot detection.</para></listitem>
            <listitem><para>The <xref linkend="output_options"/> box controls
              how the extracted localizations are filtered, displayed
              and stored.</para></listitem>
            <listitem><para>The run button starts a new job with the currently
              selected options. The configuration items for the job option tab
              can be changed while the started job is running and have no effect
              on it.</para></listitem>
          </orderedlist>
        <section id="input_options" xreflabel="Input Options">
           <title>Input options</title>
           <para>The input options box is used to select one of the input
              modules via the input driver combo box at its
              top. The other options in this box change depending on the
              input driver and are documented together with the driver in
              <xref linkend="input_driver"/>.</para>
           <para>At the default setting of "File", the correct input driver
             is deduced from the file given by the file name field.</para>
           <elemtable>
             <elem desc="Input driver" topic="Input_driver">
               This selection box allows to select the used input driver.
               At its default setting, it deduces the input driver from the
               filename supplied with "Input file location".</elem>
             <elem desc="Input file location" topic="Input_file">
               Enter the file to be processed with rapidSTORM here. The file
               type is deduced automatically from the file's content on job
               start. (It is deduced from the content, not the file name
               extension. If the auto-detection should fail for some reason,
               try selecting the file type by hand in the input driver field.)
               </elem>
           </elemtable>
        </section>
        <section id="processing_options" xreflabel="Processing Options">
          <title>Processing options</title>
          <para>The processing options controls the operation of the
            <xref linkend="dSTORM_engine"/>, that is, the extraction
            of fluorophore
            localizations from the images loaded by the input driver.
            Therefore, these options are intricately connected with the
            <xref linkend="Fundamentals"/> and the more involved options
            are documented there. The common options in this part are:</para>
          <elemtable> 
            <title>Processing configuration items</title>
            <elem desc="Disable std. dev. estimation" topic="FixSigma">
              <para>
              This option disables the code that tries to estimate
              the form of the point spread function. The user must provide
              the standard deviation parameters (i.e., the entries of
              the covariance matrix) in this case.</para>
              <para>See also: <xref linkend="psf_model"/></para>
            </elem>
            <elem desc="Fit with free covariance matrix" topic="FreeForm">
                <para>Treat the covariance matrix entries as variables
                in the fit process rather than as constants. The estimated
                or fixed standard deviation parameters act as initial values
                for the estimation when the free covariancce matrix is
                selected.</para>
                <para>See also: <xref linkend="psf_model"/></para>
            </elem>
            <elem desc="Threshold for relative spot asymmetry" 
                  topic="AsymmetryThreshold">
            <para>Minimum spot asymmetry result of 
              <xref linkend="quadrant_differential_residue_analysis"/> that
              forces <xref linkend="two_kernel_analysis"/>. Since the range
              of spot asymmetries is [0..1], setting this parameter to
              1 will disable quadrant-differential and two-kernel analysis
              completely, greatly speedingup computation, and setting
              the parameter to 0 will perform two-kernel analysis on all
              spots, slowing computation and making false positives in
              double-spot detection likely. Experiments suggest values from
              0.15 to 0.4.</para>
            </elem>
            <elem desc="Spot finding methods" topic="Smoother">
              <indexterm><primary>smoothing</primary></indexterm>
              Select a smoothing method to be employed before selecting
              local maximums as spot candidates. The standard method here is
              smoothing with an average mask (Spalttiefpass), which gives
              good performance for most images. Median smoothing provides
              slower, but sometimes more accurate and less blurring 
              smoothing. Erosion (also known as local minimum filter)
              is faster than the median filter and gives similar results
              for small (standard deviation close to 1) spots, while 
              the fillhole transformation followed by erosion is better for
              large spots. For a complete discussion and quantitative
              comparison, see <xref linkend="WolterDiplomarbeit"/>
              and <xref linkend="Wolter_JoM_09"/>.
            </elem>
            <elem desc="Amplitude discarding threshold" 
                  topic="AmplitudeThreshold">
              <indexterm><primary>amplitude threshold</primary></indexterm>
              Minimum amplitude parameter of the fitted 
              <xref linkend="psf_model"/>
              necessary for a spot to be considered a localization.
              If the fitted position has an amplitude lower than this value,
              it is discarded as an artifact.
            </elem>
            <elem desc="Number of CPUs to use" topic="CPUNumber">
              Use this many computation threads. This should be set
              to the number of processors or cores you want to be utilized
              by rapidSTORM.
            </elem>
          </elemtable>
        </section>
        <section id="output_options" xreflabel="Output Options">
           <title>Output options</title>
           <para>The output options box is separated into two components:
             <indexterm><primary>output tree</primary></indexterm>
             To the left hand side, you see a tree element showing the
             <emphasis>output tree</emphasis>. The output tree is the data
             structure that controls the filtering
             and processing of the localizations found by the engine. On the
             right hand side, you see the
             options for the currently selected node in the output tree. When
             the program is started, this is the root node.</para>
           <imagedata fileref="rapidstorm-output-box.PNG"/>
           <para>The output tree defines the way in which localizations are
             processed. Each node of the tree is called an
             <indexterm><primary>output module</primary></indexterm>
             <emphasis>output module</emphasis> (in this section also called
             module), which processes data in some
             way specific to the type of the module: For example, the
             "Count localizations" module counts all localizations it 
             receives and displays the current amount.</para>
           <para>The first, root node (called "dSTORM engine output")
             symbolizes the output of the <xref linkend="dSTORM_engine"/>.
             Each module connected to it receives all localizations found by
             the engine without filtering or processing.</para>
           <para>Some modules such as <xref linkend="filter_localizations"/>
             not only receive, but also send localizations. For example, the
             localization filter sends all localizations that match its
             criteria. The outputs that receive localizations from such a
             filter are displayed in the tree as children nodes of it.</para>
           <para>For an example, consider
             the tree shown in the graphic: 
             While the first "Localizations file", "Count localizations",
             "Display progress", "Filter localizations" and "Average images"
             receive the unmodified output from the 
             <xref linkend="dSTORM_engine"/>. The
             localizations received by the second "Localizations file" and for
             "Image display" are those modified by the "Filter localizations"
             module.</para>
          <para>Clicking on an output module in the tree view shows this
             module's configuration in the right part of the display. Each 
             module has specific configuration options, which are documented
             together with the module's description in the <xref 
             linkend="output_modules"/> chapter.
             For modules that can have outputs, additionally four control 
             elements are shown:</para>
          <elemtable> 
            <title>Output configuration items</title>
            <elem desc="Choose new output" topic="ChooseOutput">
              In this list you find all available output modules.
              After selecting one of the modules, it is added into the
              output tree as a child of the current tree node.
            </elem>
            <elem desc="Select output to remove" topic="ToRemove">
              Select one of the active outputs of the current module in
              this box. The selected module and all of its submodules are
              deleted from the output tree.
            </elem>
          </elemtable>
        </section>
      </section>
      <section>
        <title>The job status tabs</title>
        <para>For each running job, a job status tab is displayed in the job
              bar.</para>
        <imagedata fileref="rapidstorm-job-status.PNG"/>
        <para>The job status tab is organized along the same lines as the
          job options tab: At the top, you see the status of the input file
          with some descriptive data loaded from the SIF file. In the middle,
          you see the computation elements (in this case, only the stopper),
          and towards the bottom, you see the output control elements.</para>
        <para>The input elements (thos above the stop computation button)
          are specific to the <xref
          linkend="input_driver"/> used for computation.
          The output elements (those below the button) are specific to the
          used <xref linkend="output_modules"/> and
          organized in the same tree structure as in
          the job options view, but shown all at once in the sequence in which
          they appear in the tree. In this example, this means that the
          localization counter at the top of the output section is shown by
          the count output module, the progress meter is shown by the progress
          output module, the localization strength filtering elements and the
          drift correction by the localization filter, and so on. If you had
          added multiple of these output modules, some of these elements would
          be shown twice, for example showing the localization counts before
          and after filtering the localizations.</para>
        <para>There are two generic control elements in this tab:</para>
        <elemtable> 
          <title>Output configuration items</title>
          <elem desc="All elements above the Stop computation button">
            Elements specific to the <xref linkend="input_driver"/> and 
            documented by the driver.</elem>
          <elem desc="Stop computation" topic="StopEngine">
            Pressing this button aborts computation of localizations
            and stops acquisition of images, but keeps the job open for
            result inspection.
          </elem>
          <elem desc="All elements below the Stop computation button">
            Elements specific to the <xref linkend="output_modules"/> and 
            documented by the module.</elem>
          <elem desc="Close job" topic="CloseJob">
            Pressing this button stops the job and closes the
            job status tab.
          </elem>
        </elemtable>
      </section>
      <section>
        <title>The menu bar</title>
        <para>The menu bar is the control element at the top of the 
          configuration window and offers two controls: Storing and loading
          macros and changing the expertise level.
        </para>
        <section><title>Macros</title>
        <para>Macros are text files that can be used to automatically repeat
          the actions youhave performed in the configuration window. This
          feature can save a great amount of work if you often use a particular
          configuration that is tedious to set up.</para>
        <para>You can set up a
          macro by selecting the <menuitem>Save as ...</menuitem> item in
          the <menu>Macro</menu> menu. After you have saved your macro, you
          can continue work normally; should you wish to re-save your workflow,
          use the <menuitem>Save</menuitem> or <menuitem>Save as ...</menuitem>
          items.</para>
        <para>To replay a macro, open a fresh instance of the rapidSTORM 
          software, select the <menuitem>Load</menuitem> menu item and the macro
          you want to replay.</para>
        </section>
        <section id="expertise_level" xreflabel="expertise level">
          <title>Changing the expertise level</title> 
          <para>Not all controls are shown at the start of the rapidSTORM
          software to avoid confusion for new users. To display more 
          configuration options, the <menu>Expertise</menu> menu is used.
          The expertise level influences only which elements are displayed,
          not the result of any computation.
          </para>
        </section>
      </section>
    </chapter>
    <chapter id="image_window">
      <title>Image window</title>
      <para>When a job is started with the <xref linkend="image_display"/>
        output module active, a window showing an image with the already
        computed localizations is displayed. If this image is larger than
        the available screen, only a part of it is displayed.</para>
      <para>You can select another part of the image for display with the
        cursor keys. Zooming the image can be done either with the zoom level
        control in the job status tab or with the 'i'and 'o' keys in the
        image window. You can close the window by pressing 'q' or using the
        window close button provided by Windows.</para>
    </chapter>
  </part>

  <part id="Step_by_Step">
    <title>Step by Step</title>
    <chapter>
      <title>Basic use tutorial</title>
      <para>This tutorial will exemplify basic rapidSTORM usage by showing
        how to convert an Andor SIF acquisition to a super-resoluted image
        with rapidSTORM. Due to unusually high noise in the source acquisition,
        we will additionally raise the amplitude threshold and reduce the
        resolution enhancement factor.</para>
      <para>After starting rapidSTORM, a window similar to this appears:</para>
      <imageobject>
      <imagedata fileref="SbSa.PNG"/>
      </imageobject>
      <para>To select the input file to work on, drag &amp; drop it into the field
        marked by the red 1. rapidSTORM will automatically determine that this
        is a SIF file when you start the job.</para>
      <para>To change the amplitude threshold, select the field marked with a
        red 2 and enter a higher value - say, 5,000. Enter the number naturally
        according to your locale; for example, the example shown here was 
        generated on a continentally European computer, where "3.000" means
        three thousand.</para>
      <para>To change the image display settings, you have to change the
        configuration of the image display output module. In this example,
        this module is hidden initially by the collapsed tree section under the
        "Filter localizations" module. Expand that section of the tree by 
        clicking on the circle-and-line handle above the red mark 3. Then
        click on the "Image display" entry marked 4 in the next image to
        show the options for image display.</para>
      <imageobject>
      <imagedata fileref="rapidstorm-step-by-step-2.PNG"/>
      </imageobject>
      <para>Change the resolution enhancement to the desired factor of 8 by
        entering the value into the box marked by 5. Finally, to start 
        computation, click on the Run button marked by 6. An image window and
        a job progress window will open and show you  the progress of 
        computation on your rapidSTORM job. Once finished, the result image
        will be saved as a JPG image under "C:\Daten\Cy5_dSTORM\Cy5.jpg",
        as the "Save image to:" text field (which has been filled automatically)
        documents.
        </para>
    </chapter>
  </part>

  <part id="References">
    <title>Reference manual</title>
    <chapter id="input_driver">
      <title>Input drivers</title>
      <section id="localizations_file_input" xreflabel="Localizations file">
        <title>Localizations file</title>
        <para>This input driver can be used to read the files written
          by the <xref linkend="localizations_file_output"/> output module.
          The file format is documented with the output module.</para>
      </section>
      <section>
        <title>Andor SIF file</title>
        <para>This input driver can read the Andor SIF file format produced
          by Andor Technology software such as SOLIS.</para>
        <para>SIF files are stored in an uncompressed binary format with a
          simple text header. Because reading SIF files cannot be implemented
          in a forward-compatible way (reading new SIF files with old software),
          this driver might be unable to open the file; in this case, an error
          message is shown indicating the maximum known and the encountered
          version of the Andor SIF structure. Please obtain a newer version
          of this software in this case.</para>
        <para>If the <xref linkend="expertise_level"/> is
          sufficient, this module allows to select an inclusive range of
          image numbers (starting from 0) which are selected from the SIF file.
          This range is automatically cropped to the range of available images.
        </para>
        <elemtable>
          <title>SIF job status</title>
          <elem desc="Desired CCD temperature" topic="DesiredTemp">
            Shows the CCD cooler's target temperature at acquisition time.
          </elem>
          <elem desc="Output amplifier" topic="OutputAmplifier">
            Displays the type of the amplifier used for the acquisition.
          </elem>
          <elem desc="EM CCD Gain multiplier" topic="EM_Gain_Multiplier">
            Displays the EM CCD Gain confiured for the acquisition.
          </elem>
          <elem desc="Used exposure time" topic="ExposureTime">
            Displays the acquisition time per image in seconds
          </elem>
          <elem desc="Used kinetic cycle time" topic="KineticTime">
            Displays the time delay between images
          </elem>
          <elem desc="Input file location" topic="SIF_Status_InputFile">
            Displays the path of the used input file for reference
          </elem>
        </elemtable>
      </section>
      <section>
        <title>Direct connection to Andor camera</title>
        <para>SECTION YET TO BE WRITTEN</para>
      </section>
    </chapter>
    <chapter id="output_modules">
      <title>Output modules</title>
      <para>
        <indexterm><primary>output tree</primary></indexterm>
        This chapter is dedicated to the description of the different
        output modules that can be inserted into the output tree. Each of
        these modules will be defined by a general description of its purpose
        and its mode of operations, a table of the configuration options it
        will display in job options window (if any), 
        and a table of the configuration
        options it will display in the job status window (if any).</para>
      <section id="localizations_file_output" xreflabel="Localizations file">
        <title>Localizations file</title> 
        <para>The localizations file module stores received localizations
          in an ASCII text file. This text file is line-based with one line
          per localization and one line header information. Both the header 
          line and localization lines consist of at least 4 space-delimited
          fields. For the localizations, the fields denote X and Y position
          in pixels, the image number of the localization and the strength
          of the localization (Gaussian fit amplitude) in camera A/D counts.
          The header consists of the maximum allowed X/Y coordinates and
          image number and of a 0 for the amplitude.
        </para>
        <para>More fields may be present, but will not be documented.
          Forward compatibility can be achieved by ignoring all but the first
          four fields.</para>
        <elemtable>
           <title>Job options</title>
           <elem desc="Write localizations to" topic="Table_ToFile">
             Output localizations file name. Is derived automatically from
             input file name.
           </elem>
        </elemtable>
           
<!-- Only relevant when traces are present. 
        <para>This output module offers, apart from the output file, an
          option to separate the localizations by <xref linkend="trace"/>.
          If this option is selected, the lines will be sorted by trace,
          with two empty lines after each trace.</para>
-->
      </section>
      <section id="image_display" xreflabel="Image display">
        <title>Image display</title> 
        <para>The image display module displays all received localizations in
          an image and optionally saves this image to a file.</para>
        <section>
          <title>Image construction algorithm</title>
          <para>The image construction is performed with the algorithm documented
            in <xref linkend="WolterDiplomarbeit"/>. Summarizing this algorithm,
            a localization density map is constructed by linearly interpolating
            and accumulating the localizations, weighted by their amplitude,
            on a pixel lattice.
            This density map is discretized with a very high depth to generate
            a high dynamic range image; this high-dynamic range image is reduced
            to a displayable range via weighted histogram equalization.</para>
          <para>The histogram equalization operation modifies the absolute
            brightness differences between image areas to optimize contrast.
            This means that a pixel in the result image with a brightness of
            200 did not necessarily receive twice as many localizations as a
            pixel with brightness 100 did. Histogram equalizations guarantees
            only that a brighter pixel represents at least as many localizations
            as a weaker pixel.</para>
          <para>You can change the extent to which histogram equalization is
            performed by changing the histogram equalization power between
            0 and 1. 0 means no histogram equalization, and pixel values are
            linear with localization density. 1 means full equalization: All
            brightness values appear equally often in the image. While images
            without histogram equalization aplied often suffer in contrast due
            to few, very bright pixels suppressing the normal structures, too
            much histogram equalization overemphasises regions with weak signals
            and background noise. The default value for the histogram power is
            usually a good compromise.</para>
        </section>
        <section id="color_coding">
          <title>Color coding</title>
          <para>Several different coloring schemes are available for the
            resulting image. All of these operate on the histogram-normalized
            brightness, but display the brightness in various ways to enhance
            information
            depth, produce a pretty-looking image or give information about the
            time coordinate. All of these color schemes show brighter colors
            to indicate more localizations; to invert this meaning and show,
            for example, black localizations on a white background, use the
            "Invert colours" option.</para>
          <para>The <emphasis>black and white</emphasis> colour scheme is the
            fastest colour code. It displays the equalized brightness directly
            on a scale ranging from black (no localizations) to white (maximum
            amount).</para>
          <para>The <emphasis>black, red, yellow and white</emphasis> colour
            scheme offers a higher dynamic range by displaying the lowest
            third of the brightness values on a scale ranging from black to
            red, the middle third on a scale from red to yellow and the highest
            third on a scale from yellow to white. In total, about 760
            brightness levels are displayed.</para>
          <para>The <emphasis>constant colour</emphasis> colour
            scheme is similar to the black-and-white scheme, but uses an
            arbitray colour instead of white. You can use the "Select colour
            hue" and "Select saturation" to choose the colour.</para>
          <para>The <emphasis>Vary hue by time coordinate</emphasis> colour
            scheme colour-codes each localization by its time coordinate, that
            is, by the number  of the image it occured in. The code starts at
            the
            hue selected in "Select colour hue" and then follows the colour
            circle of the HSV colour model, that is, ranges from red over
            yellow, green, cyan, blue to violet.
            If multiple localizations contribute to the same pixel, hue and
            variance are interpreted as angle and radius on a plane, converted
            to cartesian coordinates, averaged arithmetically and converted
            back to hue and variance.
            For example, if red (hue 0, 
            saturation 1) and yellow-green (hue 0.25, saturation 1) are present
            with amplitudes 1 and 4 on a pixel, they are
            converted to the points (1,0) and (0,1), averaged to (0.2,0.8) and
            transformed back to (hue 0.21, saturation 0.82), which is a slightly
            pale yellow. Observe that a point with localizations equally 
            distributed over a long range of images tends to have a low
            saturation, that is, appear white.</para>
        </section>
        <section>
          <title>Changing parameters after starting a job</title>
          <para>If a <xref linkend="repeater"/> service is available through a
            parent module, most image display parameters can be changed even
            after the job is started.</para>
        </section>
        <elemtable>
          <title>Job options</title>
          <elem desc="Save image to" topic="Viewer_ToFile">
            If a filename is given here, the final result image will be saved
            to the given file. The file extension determines the file type, and all
            common file formats (GIF, JPG, PNG, TIF) are supported.
          </elem>
          <elem desc="Display dSTORM result image" topic="Viewer_ShowOutput">
            If this checkbox is checked, the result image will be shown online
            in an image window.
            Disable for faster computation.
          </elem>
          <elem desc="Resolution Enhancement" topic="Viewer_ResEnh">
            Set the aspect ratio of source (camera detector) pixels to target
            pixels. If set to 10, for example, the result image will be have 10
            times more pixels in X direction and 10 times more pixels in Y
            direction.</elem>
          <elem desc="Color palette for display" topic="Viewer_ColorScheme">
            Select one of the color schemes given in <xref 
            linkend="color_coding"/>.
          </elem>
          <elem desc="Invert colors" topic="Viewer_InvertColors">
            Invert the color display. Each color is inverted among the three
            primary color axes (red, green, blue), making red to cyan and
            black to white.
          </elem>
          <elem desc="Select color hue"  topic="Viewer_Hue">
            Set the hue for constant color coding or the starting hue for
            variable hueing. Ranges from 0 (red) over 1/6 (yellow), 1/3
            (green), 1/2 (cyan), 2/3 (blue) and 5/6 (violet) to 1 (red again).
          </elem>
          <elem desc="Select saturation" topic="Viewer_Saturation">
            Set the saturation for constant color coding. Ranges from 
            0 (no colors at all, only grey) to 1 (fully saturated colors).
          </elem>
        </elemtable>
        <elemtable>
          <title>Job status</title>
          <elem desc="Resolution enhancement" topic="Viewer_Status_ResEnh" >
            Shows the current resolution enhancement (see job options table
            for a definition) and allows, if a 
            <xref linkend="repeater"/> service is present, to dynamically
            change it.</elem>
          <elem desc="Histogram normalization power" 
                topic="Viewer_Status_Power">
            Shows the histogram normalization power and allows dynamic 
            manipulation.</elem>
          <elem desc="Zoom level" topic="Viewer_Status_Zoom">
            Control element for zooming in (positive values) or out (negative
            values) in the displayed image.</elem>
          <elem desc="Save image to" topic="Viewer_Status_ToFile">
            Shows and changes the file name where the result image should be
            written to. The file extension determines the file type, and all
            common file formats (GIF, JPG, PNG, TIF) are supported.</elem>
          <elem desc="Save image" topic="Viewer_Status_Save">
            Save the image at the current state of computation to the file given
            by "Save image to".</elem>
        </elemtable>
      </section>
      <section> 
	<title>Count localizations</title>
        <para>This output module outputs a count of all received localizations.
          </para>
        <elemtable>
          <title>Job status</title>
          <elem desc="Number of localizations found" topic="Count_Count">
            Displays the number of localizations propagated by the parent
            module.</elem>
        </elemtable>
      </section>
      <section id="filter_localizations" xreflabel="Filter localizations">
        <title>Filter localizations</title>
        <para>This general-purpose output module can perform three basic, 
          simple tasks: Firstly, it filters received <xref 
          linkend="localization"/>s by
          amplitude and forwards them to its output modules. Secondly, it
          applies <xref linkend="linear_drift_correction"/> to the localizations
          passing through it. Thirdly, it provides a
          <xref linkend="repeater"/> service.
          all received localizations and can repeat them to its own output
          modules, if necessary.</para>
        <para>The first function works similiarly to the amplitude threshold
          found in the processing options, but does not influence the dynamical
          threshold. Only localizations larger than the minimum and
          smaller than the maximum amplitude pass through the filter.</para>
        <para>The second function, the linear drift correction, works as
          decribed in the corresponding Fundamentals section. The amount of
          linear drift correction (in detector pixels) in the last frame is
          given by the X/Y drift correction parameters.</para>
        <note>The result repeater does not provide the source images
          to its children output modules. Modules such as the image
          averager will not work below it.</note>
        <elemtable>
          <title>Job options and status</title>
          <elem desc="Minimum localization strength" topic="Filter_MinStrength">
            Select the minimum strength a localization must have to be
            handed to the children output modules</elem>
          <elem desc="Maximum localization strength" topic="Filter_MaxStrength">
            Select the maximum strength a localization may have to be
            handed to the children output modules</elem>
          <elem desc="X drift correction" topic="Filter_XDrift">
            Amount of linear drift correction to apply in X direction to the
            localizations handed to children modules</elem>
          <elem desc="Y drift correction" topic="Filter_YDrift">
            Amount of linear drift correction to apply in Y direction to the
            localizations handed to children module.</elem>
        </elemtable>
      </section>
      <section> 
        <title>Slice localization set</title>
        <para>This output module can automatically slice one input acquisition
          into a number of output acquisitions, each of which is processed
          seperately. This process is controlled by its two parameters:</para>
        <elemtable>
          <title>Job options</title>
          <elem desc="Size of one slice in images" topic="Slicer_Size">
            Each slice will have as many images as specified here.
            Suppose slices in an acquisition 1000 images long start at
            0, 300, 600 and 900 and this parameter is set to 500, there
            will be the four slices 0-499, 300-799, 600-999 and 900-999.
          </elem>
          <elem desc="Start new slice every n images" topic="Slicer_Dist">
            One slice will be started at each image number 
            divisible by this number. Suppose 1000 images are in an
            acquisition and this parameter is set to 300, slices will
            be started at images 0, 300, 600 and 900.
          </elem>
          <elem desc="File name pattern" topic="Slicer_Pattern">
            Pattern for output file basenames. The output files (for example
            for images or localization files) will be generated by this pattern,
            where %i will be replaced with the slice number.
          </elem>
        </elemtable>
        <para>After determining the number of slices, this module makes one
         copy of its children output modules for each slice. Each copy will
         receive only the localizations in its slice. To keep memory usage
         low, the copies will be made on demand, when the first localization
         of a slice arrives, and will be closed as soon as the last localization
         of its slice has been processed.</para>
      </section>
      <section> 
         <title>Average images</title>
         <para>This module does not process localizations, but rather averages
           all source images it receives to produce one averaged image. This
           image can be used to see how the specimen would have looked without
           dSTORM processing.</para>
         <para><note>This module will only work when source images are 
           available.</note>
           Source images are unavailable for children, direct or
           indirect, of the <xref linkend="filter_localizations"/> module or
           if the input comes from the <xref linkend="localizations_file_input"/>
           driver.</para>
        <elemtable>
          <title>Job options</title>
          <elem desc="Write averaged image to" topic="AverageImage_ToFile">
            Target file to write the gained average image to. 
            The file extension determines the file type, and all
            common file formats (GIF, JPG, PNG, TIF) are supported.</elem>
        </elemtable>
      </section>
      <section> 
        <title>Display progress</title> 
        <para>Show a progress bar to indicate state of computation.</para>
        <elemtable>
          <title>Job status</title>
          <elem desc="Progress on this job" topic="ProgressMeter_Progress">
            This progress bar shows the progress on the current job, that is,
            which percentage of the input images has been successfully
            computed.</elem>
        </elemtable>
      </section>
    </chapter>
  </part>

  <part id="Fundamentals">
        <title>Fundamentals</title>
        <chapter id="dSTORM_engine" xreflabel="dSTORM engine">
           <title>dSTORM engine</title>
           <para>The dSTORM engine is the collective term for the core of the
             rapidSTORM software that is not part of the input or output
             drivers. The dSTORM engine is responsible for converting a
             vector of input images into a set of <xref 
             linkend="localization"/>s, performing
             the steps of spot detection, spot fitting and spot judging
             defined in <xref linkend="WolterDiplomarbeit"/>. While the exact
             algorithms are out of the scope of this manual, a short summary
             of the engine operation can be given:</para>
           <para>First, the input images are smoothed to reduce the amount of
             noise present. The local maximums of these noise-reduced images
             are located and stored as spot candidates, that is, positions
             where spot positions are likely to be present. The candidates
             are sorted with the strongest values first in the list and then
             nonlinearly fitted with the <xref linkend="psf_model"/> in the
             order established by that sorting. Once three
             successive candidates have failed to be fitted as localizations,
             the fitting process for the image is aborted.</para>
        </chapter>
        <chapter id="localization" xreflabel="localization">
           <title>Localization</title>
           <para>A localization denotes the position (space and time) and the
             strength of a 
             suspected fluorophore emission. A localization denotes only a 
             suspected
             position because the high noise conditions in photoswitching
             micrsocopy introduce false localizations, either through background
             noise or multiple close-by emitters.</para>
           <para>Localization coordinates are not given on a lattice as pixels
             are, but are rather subpixel-accurate. The accuracy is mostly
             given by the emission strength and the background noise as 
             described by <xref linkend="ThompsonPaper"/>.</para>
        </chapter>
        <chapter id="repeater" xreflabel="Repeater">
           <title>Repeater</title>
           <para>A repeater is any output module that stores all received
             <xref linkend="localization"/>s in memory and can repeat them if
             necessary. While
             this costs, naturally, roughly 32 bytes of memory per localization,
             it allows changing many processing parameters even after 
             computation has started.</para>
           <para>However, repeaters are not able to store the input images used
             in computation because doing so would quickly exhaust the available
             memory. Therefore, output modules that need access to source images
             may not be used as children of repeater modules.</para>
        </chapter>
        <chapter id="psf_model" xreflabel="PSF model">
          <title>PSF model</title>
          <para>The point spread function (PSF) is modeled for rapidSTORM
            purposes as a two-dimensional Gaussian function added to a
            background signal. This function has the parameters amplitude,
            background signal, center position and 
            covariance matrix. We can assume the covariance matrix to be
            constant for any acquisition, and so only the amplitude, the
            background signal and the center position are fitted by the engine,
            while the covariance matrix is estimated iteratively by a second
            fitting process or given a-priori.
          </para>
          <para>While this Gaussian model does not match the point spread 
            functions of real systems exactly, it is a good approximation
            with easily computed derivatives. Studies such as Thomann et al.
            have shown that the
            approximation is good enough for practical purposes.
            </para>
        </chapter>
        <chapter id="quadrant_differential_residue_analysis"
                 xreflabel="quadrant-differential residue analysis">
          <title>Quadrant-differential residue analysis</title>
          <para>When two fluorophores emit close to each other, typically the
             nonlinear fit will result in a suspected fluorophore position
             midway between the two fluorophores and with a high amplitude.
             In this case, the fit results show a characteristic handle
             structure: The two true fluorophore emissions leave slightly
             positive resiudes, while there are negative residues on an axis
             perpendicular to the one connecting the fluorophores.</para>
          <para>This condition is detected well by quadrant-differential
             residue analysis: The residue matrix is divided into quadrants,
             with the pixels above both diagonals forming the upper quadrant,
             the pixels above the main and below the off diagonal forming the
             right quadrants and so on. Pixels right on the diagonals are 
             ignored. Then, the opposing quadrants are summed, and these sums
             substracted from another, resulting in two quadrant differences:
             upper and lower minus right and left and right and left minus
             upper and lower. This process is repeated for the quadrants
             defined by the central row and the central column.</para>
          <para>The maximum sum obtained in this way divided by the sum of
             the absolute quadrant contributions is an observable correlating
             highly with the true presence of double emitters. Also, the 
             quadrants containing the positive contribution in the highest sum
             indicate along which axis the double emission happened.</para>
        </chapter>
        <chapter id="two_kernel_analysis"
                 xreflabel="two-kernel analysis">
          <title>Two-kernel analysis</title>
          <para>When <xref linkend="quadrant_differential_residue_analysis"/>
            indicated a likely double emission, this hypothesis is tested by
            fitting a model consisting of the sum of two Gaussian functions
            with a common background to the data. This is called two-kernel
            analysis. When two-kernel analysis produces a two-kernel fit with
            two nonnegligible kernels and with significantly smaller residues
            than the normal one-kernel fit, the hypothesis of a double emission
            is deemed confirmed.</para>
        </chapter>
        <chapter id="linear_drift_correction"
                 xreflabel="linear drift correction">
          <title>Linear drift correction</title>
          <para>Instabilities in the experimental setup can, despite all
            experimental effort, lead to a slow, creeping shift (called drift)
            of the 
            specimen's image on the camera detector. In this case, the quality
            of the resulting image is greatly degraded because structures
            appear smeared in the direction of the drift.</para>
          <para>In most cases, the drift is small and approximately linear
            over the course of the acquisition. Such a drift can be corrected
            by substracting the drift velocity times the time elapsed since
            acquisition start from each image.</para>
          <para>A convenient way to fine-tune drift correction is to add
            a time-hued image display as a child of the localization filter and
            optimize the settings for a mostly white or, at least, largely
            color-uncorrelated image.</para>
        </chapter>
  </part>

  <part id="appendix">
    <title>Appendix</title>
    <bibliography id="Bibliography">
      <title>Bibliography</title>
      <biblioentry id="WolterDiplomarbeit">
       <abbrev>Wolter2009a</abbrev>
       <title>An accurate and efficient algorithm for real-time localisation
         of photoswitchable fluorophores</title>
       <author><firstname>Steve</firstname><surname>Wolter</surname></author>
       <publisher>
         <publishername>Bielefeld University</publishername>
       </publisher>
       <date>2009</date>
       <bibliosource class="uri">http://bieson.ub.uni-bielefeld.de/opus/frontdoor.php?source_opus=1494</bibliosource>
      </biblioentry>
      <biblioentry id="Wolter_JoM_09">
       <abbrev>Wolter2009b</abbrev>
      </biblioentry>
      <biblioentry id="ThompsonPaper">
       <abbrev>Thompson2002</abbrev>
      </biblioentry>
    </bibliography>
    <chapter id="support">
      <title>Support</title>
      <para>This software is currently in alpha stage. There is no formal 
        support yet, sorry.</para>
    </chapter>
  </part>
</book>
