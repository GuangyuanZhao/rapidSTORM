global srcdir
set board unix
lappend boards_dir "$srcdir/boards"

proc initialize {} {
	dstorm_start
    expect_after {
        -re "Could not perform action:" { fail "$test" }
        -re "PROGRAM TERMINATED WITH" { fail "$test" }
        eof     { fail "$test" }
        timeout { fail "$test" }
    }
}
# -re "\nseverity set Error\r*\n" { fail "$test" }

proc get_next_output_node_name { test_name } {
    set test $test_name
    expect {
        -re "in EngineOutput declare Object\r*\nname (Output\[A-Za-z0-9\]*)\r*\n"
            { return $expect_out(1,string); }
    }
    return ""
}

proc clear_tmp_dir {} {
    global tmpdir_host
    if { [glob -nocomplain -dir $tmpdir_host *] != "" } {
        eval file delete [glob -dir $tmpdir_host *]
    }
}

proc dstorm_start {} {
    global DSTORM
    global timeout
    global tmpdir
    global have_test_plugin
    global display_control_fifo
    global env
    global netcat_host
    global have_process_watcher

    program_start $DSTORM --Twiddler

    set have_process_watcher 0;
    set test "Initialization"

    send "cmd 0 nop\n"
    set def_timeout $timeout
    set timeout 300
    set have_test_plugin 0
    expect {
        -re "PROCESS WATCHER ACTIVE" { 
            set have_process_watcher 1; 
            exp_continue 
        }
        -re "Test plugin loaded" {
            set have_test_plugin 1; 
            exp_continue 
        }
	-re "ack 0" {}
        timeout { puts "Failed to react to command"; exit 1 }
        eof { puts "Failed to load"; exit 1 }
    }
    set timeout $def_timeout

}

proc dstorm_attach {} {
    set test "attachment works"
    set timeout 5
    send "cmd 23 attach\n"
    expect {
        "ack 23" { pass "$test" }
        timeout { fail "$test"; exit 2 }
    }
}

proc dstorm_exit {} {
    puts "Quitting"
    global spawn_id
    if { $have_process_watcher == 1 } {
        send "STOP\n"
    }
    if { [ catch { send "quit\n" } ignore ] } {
        fail "termination"
    } else {
        set has_quit 0
        set test "termination"
        expect {
            -re "quit" { set has_quit 1; exp_continue }
            -re "PROCESS TERMINATED WITH EXIT CODE (\[0-9\]*)" {
                if { $expect_out(1,string) == 0 } {
                    pass "$test"
                } else {
                    fail "$test"
                }
            }
            timeout { fail "$test" }
            eof {
                if {$has_quit == 1} { pass "$test"; } else { fail "$test"; } 
                wait
            }
        }
    }
}

proc stage_init { unary_count_of_successes } {
    global stage_count
    global necessary_stage_count
    set stage_count ""
    set necessary_stage_count $unary_count_of_successes
}

proc stage_pass { } {
    global stage_count
    global necessary_stage_count
    if { $stage_count == $necessary_stage_count } {
       return "pass \"\$test\""
    } else {
	set stage_count 1$stage_count
        return "exp_continue"
    }
}

proc wait_for_jobs { } {
    set timeout -1
    set test "All jobs from previous test terminated"
    send "cmd 0 wait_for_jobs\n"
    expect -re "ack 0"
    set timeout 10
}

proc begin_test_suite {} {
}
proc start_test_suite {} { begin_test_suite }
proc end_test_suite {} { 
    set timeout 25; 
    set test "Job termination"; 
    wait_for_jobs; 
    disconnect_camera;

    set timeout 25; 
    send "cmd 1 detach\n"; expect "ack 1";
    send "cmd 0 reset\n"; expect "ack 0"; 
}

proc load_default_config {} {
    global DSTORM

    set config_file [file join [file dirname "$DSTORM"] .. share rapid2storm dstorm-config.txt]
    set filestream [open "$config_file" r]
    while {[gets $filestream line] >= 0} {
        send "in Car $line\n"
    }
    close $filestream
}

proc disconnect_camera {} {
    set timeout 10
    set test "Disconnecting from camera"
    dstorm_attach
    set campath "in Car in Method in InputMethod in AndorDirectConfig"
    set caminitpath "$campath in CamControl in Initialization"
    send  "$caminitpath in NumericState in value query\n"
    expect {
        -re "$caminitpath in NumericState in value value set 0" { pass "$test"; }
        -re "$caminitpath in NumericState in value value set \[1-9\]" { 
            send "$caminitpath in Initialization in DisconnectFromCamera in value set 1\n";
            exp_continue;
        }
        -re "$caminitpath in NumericState in value set 0" { pass "$test"; }
        -re "$caminitpath" { exp_continue; }
    }
}
