begin_test_suite
global have_test_plugin
global have_process_watcher
dstorm_attach

set test "SIGSEGV shutdown"

if { $have_test_plugin == 1 } {

send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in NumericState in value query\n"
expect {
    "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in NumericState in value value set 0"
        {}
    "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in NumericState in value value set \[1-9\]"
        { send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in Initialization in DisconnectFromCamera in value set 1\n"; exp_continue; }
    "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in NumericState in value set 0"
        {}
}
send "in Car in Method in InputMethod in value set AndorDirectConfig\n"
send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in Temperature in ReferenceTemperature in value set -30\n"
send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in Temperature in TargetTemperature in value set -25\n"
send "in Car in Output in EngineOutput in ChooseTransmission in value set SegFault\n"
set output_node [get_next_output_node_name "SegFault output added"]
send "in Car in Output in EngineOutput in ChooseTransmission in value set Verbose\n"
send "in Car in Output in EngineOutput in $output_node in SegFault in OnImageNumber in value set 2\n"
send "in Car in Run in value set 1\n"

set timeout 30
set can_do_test 0
expect {
    -re "Dummy camera initialized" { exp_continue }
    -re "Camera is in danger zone" { set can_do_test 1 }
    -re "Could not perform action" { unsupported "$test" }
    -re "No camera selected" { unsupported "$test" }
    -re "in CameraStatus in value set Reached required temperature" { set can_do_test 1 }
    -re "in ActualTemperature in value set" { exp_continue }
    timeout { unsupported "$test" }
}

if { $can_do_test == 1 } {
sleep 3
set timeout 30

set test "Segmentation fault signal is raised"
expect { 
    -re "Segfault at " { pass "$test" }
}

#set storm_pid [ exp_pid ]
#exec kill -SEGV $storm_pid
set test "Camera clears danger zone"
expect {
    -re "Terminated by segmentation fault signal" { exp_continue }
    -re "Camera is out of danger zone" { pass "$test" }
    -re "Interrupted by emergency shutdown" {}
    -re "ActualTemperature in value set -(\[0-9.\]*)" { 
            if { $expect_out(1,string) >= -20 } { pass "$test"; } else { exp_continue; } }
    eof { fail "$test" }
}

set test "Process terminates"
if { $have_process_watcher == 1 } {
    send "quit\n"
    expect {
        -re "PROCESS TERMINATED WITH EXIT CODE " { pass "$test" }
    }
} else {
    wait
    initialize
    pass "$test"
}

}

} else {
    unsupported "$test"
}

end_test_suite
