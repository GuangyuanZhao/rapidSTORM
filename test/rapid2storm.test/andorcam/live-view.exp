set timeout -1
start_test_suite

global have_test_plugin

expect_before {
    -re "Could not perform action: " { fail "$test" }
}

set test "Acquisition for aiming view starts"
send "attach\n"
send "in Car in Method in InputMethod in value set AndorDirectConfig\n"
send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in Temperature in ReferenceTemperature in value set -30\n"
send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in Temperature in TargetTemperature in value set -20\n"
send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in AimCamera in value set 1\n"

expect {
    -re "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in Temperature in ActualTemperature in value set " { exp_continue }
    -re "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in CameraStatus in CameraStatus in value set Acquiring images"
        { pass "$test" }
}

set timeout -1
set test "Am actually getting different images"
set digest_a "nan"
set window 0
if { $have_test_plugin == 1 } {
    expect {
        -re "Changing window (\[0-9\]*) .*with digest (\[0-9a-f\]*)" {
            set window $expect_out(1,string)
            if { [string compare $digest_a "nan"] == 0 } {
                set digest_a $expect_out(2,string)
            } elseif { [string compare $digest_a $expect_out(2,string)] != 0 } {
                pass "$test"
            } else {
                exp_continue
            }
       }
    }
} else {
    sleep 10
    unsupported "$test"
}

set test "Save button is disabled during acquisition"
send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in SaveAcquiredImage in editable query\n"
expect {
    "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in SaveAcquiredImage in editable editable set true" { fail "$test" }
    "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in SaveAcquiredImage in editable editable set false" { pass "$test" }
}


set test "Can pause acquisition"
send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in PauseCamera in value set 1\n"
expect {
    -re "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in NumericState in value set 2"
        { pass "$test" }
}

set test "Pause makes EMCCDGain editable"
send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in AD in Gain in EMCCDGain in editable query\n"
expect {
    "in Car in Method in InputMethod in AndorDirectConfig in CamControl in AD in Gain in EMCCDGain in editable editable set true" { pass "$test" }
    "in Car in Method in InputMethod in AndorDirectConfig in CamControl in AD in Gain in EMCCDGain in editable editable set false" { fail "$test" }
}

set test "Pause makes SaveImage editable"
send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in SaveAcquiredImage in editable query\n"
expect {
    "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in SaveAcquiredImage in editable editable set true" { pass "$test" }
    "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in SaveAcquiredImage in editable editable set false" { pass "$test" }
}

set test "Can save camera snapshot image"
set outfile "cam_snapshot.png"
set hof $tmpdir_host$outfile
if { [file exists $hof] == 1 } { file delete -force $hof }

send "in Car in Method set InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in SaveAcquiredImageFile in value set $tmpdir_target$outfile\n"
send "cmd 101 in Car in Method set InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in SaveAcquiredImage in value set 1\n"
set timeout 30
expect {
    "ack 101" {
        if { [file exists "$hof"] == 1 } {
            pass "$test"
            file delete -force "$hof"
        } else {
            fail "$test"
        }
    }
}

set test "Can open ROIed window"
send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewCamera in value set 1\n"

expect {
    -re "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in Temperature in ActualTemperature in value set " { exp_continue }
    -re "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in CameraStatus in CameraStatus in value set Acquiring images"
        { pass "$test" }
    -re "declare StringEntry\r*\nname CameraStatus\r*\n.*value set Acquiring images\r*\n"
        { pass "$test" }
}
set timeout 30
set test "Am actually getting different images"
set digest_a "nan"
if { $have_test_plugin == 1 } {
    set count 0
    expect {
        -re "Changing window (\[0-9\]*) with digest (\[0-9a-f\]*)" {
            set window $expect_out(1,string)
            if { [string compare $digest_a "nan"] == 0 } {
                set digest_a $expect_out(2,string)
            } elseif { [string compare $digest_a $expect_out(2,string)] != 0 } {
                pass "$test"
            } else {
                set count $count+1
                if { $count > 100 } {
                    fail "$test"
                } else {
                    exp_continue
                }
            }
       }
    }
} else {
    sleep 10
    unsupported "$test"
}


for { set i 1 } { $i <= 5 } { incr i } {
    set test "Can pause for the $i-th time"
    send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in PauseCamera in value set 1\n"
    expect {
        -re "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in NumericState in value set 2"
            { pass "$test" }
    }
    set test "Can unpause for the $i-th time"
    send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in PauseCamera in value set 1\n"
    expect {
        -re "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Initialization in NumericState in value set 5"
            { pass "$test" }
    }
}

set test "Can close viewport window"
if { $have_test_plugin == 1 } {
    send "in DummyDisplayManagerConfig in ToClose in value set Window$window\n"
} else {
    send "in Car in Method in InputMethod in AndorDirectConfig in CamControl in Readout in SelectImage in ViewportSelector in StopAimCamera in value set 1\n"
}
expect {
    -re "in CamControl in Readout in SelectImage in AimCamera in viewable set true" { pass "$test" }
}

end_test_suite
