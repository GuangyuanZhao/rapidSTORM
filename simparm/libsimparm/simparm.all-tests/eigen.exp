
spawn "./test_eigen"

set timeout 5
expect_after {
    timeout { fail "$test"; }
}

send "attach\n"
set test "FloatEntry declared"
expect -re "declare FloatEntry\r*\nname FloatMatrix" { pass "$test"; }
set test "Matrix given in correct notation"
expect -re "value set 0 0,0 0" { pass "$test"; }
set test "No unit given"
expect {
    -re "end" { pass "$test"; }
    -re "unit_name" { fail "$test"; }
}
set test "UnitEntry declared"
expect -re "declare FloatEntry\r*\nname MeterVector" { pass "$test"; }
set test "Vector given in correct notation"
expect -re "value set 0,0" { pass "$test"; }
set test "Unit given"
expect -re "unit_name set meter" { pass "$test"; }

send "in FloatMatrix in value set 1 2,3 4\n"
set test "Change listener is active"
expect -re "Float matrix changed to 1 2 and 3 4" { pass "$test"; }
set test "Can change matrix entry"
send "in FloatMatrix in value query\n"
expect -re "in FloatMatrix in value value set 1 2,3 4" { pass "$test"; }

set test "Minimum value is honored"
send "cmd 5 in BoundedEntry in value set 3\n"
expect {
    -re "\nin BoundedEntry in value set 3" { fail "$test"; }
    -re "ack 5" { pass "$test"; }
}

set test "Unsigned values fail gracefully"
send "in BoundedEntry in value set -4\n"
send "in BoundedEntry in value query\n"
expect {
    -re "\nin BoundedEntry in value value set 15" { pass "$test"; }
}

set test "Minimum value is honored for matrix"
send "in MeterVector in min set -1,-2\n"
send "cmd 6 in MeterVector in value set -3,-2\n"
expect {
    -re "\nin UnitEntry in value set " { fail "$test"; }
    -re "ack 6" { pass "$test"; }
}

send "quit\n"

catch wait reason
set test "Successful termination"
if { [lindex $reason 2] == 0 && [lindex $reason 3] == 0 } {
    pass "$test"
} else {
    fail "$test"
}
