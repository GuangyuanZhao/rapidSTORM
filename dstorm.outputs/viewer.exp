global display_control_fifo
global have_test_plugin

if { $have_test_plugin == 1 } {

begin_test_suite
clear_tmp_dir
load_default_config
dstorm_attach

set_input_file "${workspace_target}Mikrotubuli.sif"
send "in Car in Input in OutputBasename set Basename value set ${tmpdir_target}viewer\n"
send "in Car in Output in EngineOutput in Output0 in Table in ToFile in value set \n"
send "in Car in Output in EngineOutput in Output3 in Cache in Output0 in Expression in Output0 in Image in ToFile in value set \n"
send "in Car in Output in EngineOutput in Output3 in Cache in Output0 in Expression in ChooseTransmission in value set Verbose\n"

send "in Car in Run in value set 1\n"
set job [get_job_number]

set window [get_window "Result"]

set lastmean 0
set test "Waiting for a few frames to fill display"
set highest_image 0
expect {
    -re "Verbose plugin got \[0-9\]* localizations for (\[0-9\]*) fr" { 
        if { $highest_image < $expect_out(1,string) } { set highest_image  $expect_out(1,string) }
        if { $highest_image < 30 } { exp_continue }
    }
}

set test "Can close display"
send "in DummyDisplayManagerConfig in $window in Close in value set 1\n"

expect {
    -re "in $window in NonzeroCount in value set" 
        { set lastmean $expect_out(1,string); exp_continue; }
    -re "remove $window" { pass "$test"; }
    -re "in Progress value set 1" { fail "$test" }
}

set test "Waiting for more images to accumulate"
expect {
    -re "Verbose plugin got \[0-9\]* localizations for (\[0-9\]*) fr"
        { if { $expect_out(1,string) < $highest_image * 2 } { exp_continue } }
}

set test "Display is marked as closed"
send "in $job in Output3 in Output0 in Output0 in ShowOutput in value query\n"
expect { 
    -re "in ShowOutput in value value set false" { pass "$test"; } 
    -re "in ShowOutput in value value set true" { fail "$test"; } 
}

set test "Can re-open display"
send "in $job in Output3 in Output0 in Output0 in ShowOutput in value set true\n"
set window [get_window ""]
pass_if [string compare $window -1] "$test"

set test "After re-opening have sufficient pixel count"
expect {
    -re "in $window in NonzeroCount in value set (\[0-9\]+)\r*\n" {
        if { $expect_out(1,string) >= $lastmean } {
            pass "$test"
        } else {
            fail "$test"
        }
    }
}

end_test_suite

} else {
    unsupported "Testing viewer"
}
