#include <Eigen/StdVector>

#include "guf/Fitter.h"
#include <dStorm/helpers/thread.h>
#include <dStorm/helpers/back_inserter.h>
#include <dStorm/engine/Spot.h>
#include <dStorm/Localization.h>
#include <gsl/gsl_rng.h>
#include <gsl/gsl_randist.h>
#include <boost/units/cmath.hpp>

using namespace nonlinfit;
using namespace dStorm::guf;

using boost::units::quantity;

/** Data for amplitude 50000, mean (586, 700, 85) and background (15*z+20). */
double data[5][16][12] = {
{
    { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
    { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
    { 20, 20, 20, 20, 20, 20.01, 20.01, 20.01, 20.01, 20, 20, 20 },
    { 20, 20.01, 20.02, 20.04, 20.08, 20.13, 20.18, 20.19, 20.17, 20.12, 20.07, 20.03 },
    { 20.02, 20.08, 20.25, 20.62, 21.26, 22.07, 22.77, 23.01, 22.65, 21.9, 21.1, 20.52 },
    { 20.21, 20.79, 22.43, 26.09, 32.35, 40.35, 47.22, 49.55, 46.04, 38.63, 30.82, 25.1 },
    { 21.27, 24.83, 34.89, 57.23, 95.56, 144.5, 186.5, 200.8, 179.3, 134, 86.19, 51.2 },
    { 24.86, 38.44, 76.79, 162, 308.2, 494.8, 655.1, 709.5, 627.6, 454.7, 272.4, 139 },
    { 31.55, 63.84, 155, 357.6, 705.3, 1149, /* start pixel --> */1530, 1659, 1465, 1054, 620.2, 303 },
    { 37.13, 84.99, 220.2, 520.5, 1036, 1694, 2259, 2450, 2162, 1552, 909.9, 439.5 },
    { 35.83, 80.07, 205, 482.6, 959, 1567, 2089, 2266, 2000, 1436, 842.5, 407.7 },
    { 29.12, 54.62, 126.6, 286.6, 561.1, 911.5, 1212, 1314, 1161, 836.1, 494, 243.4 },
    { 23.28, 32.44, 58.31, 115.8, 214.4, 340.3, 448.4, 485.1, 429.9, 313.2, 190.3, 100.3 },
    { 20.73, 22.79, 28.58, 41.45, 63.54, 91.74, 116, 124.2, 111.8, 85.68, 58.14, 37.98 },
    { 20.1, 20.39, 21.2, 23, 26.08, 30.02, 33.4, 34.55, 32.82, 29.17, 25.33, 22.51 },
    { 20.01, 20.03, 20.1, 20.26, 20.53, 20.87, 21.17, 21.27, 21.12, 20.8, 20.46, 20.22 },
}, {
    { 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35 },
    { 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35 },
    { 35, 35, 35, 35, 35.01, 35.02, 35.03, 35.03, 35.02, 35.01, 35, 35 },
    { 35, 35, 35.02, 35.07, 35.19, 35.4, 35.59, 35.62, 35.47, 35.25, 35.1, 35.03 },
    { 35, 35.04, 35.21, 35.87, 37.53, 40.27, 42.8, 43.24, 41.19, 38.32, 36.27, 35.34 },
    { 35.04, 35.3, 36.75, 42.15, 55.87, 78.4, 99.3, 102.9, 86.02, 62.33, 45.43, 37.84 },
    { 35.19, 36.56, 43.98, 71.78, 142.3, 258.2, 365.7, 384, 297.4, 175.6, 88.65, 49.59 },
    { 35.62, 40.01, 63.81, 153, 379.6, 751.5, 1096, 1155, 877.3, 486.2, 207.2, 81.82 },
    { 36.24, 45.04, 92.73, 271.5, 725.3, 1471, 2162, 2280, 1723, 939.1, 380, 128.8 },
    { 36.56, 47.55, 107.2, 330.8, 898.3, 1830, 2694, 2842, 2146, 1166, 466.5, 152.3 },
    { 36.21, 44.8, 91.35, 265.9, 708.9, 1436, 2111, 2226, 1682, 917.5, 371.8, 126.6 },
    { 35.59, 39.77, 62.45, 147.5, 363.3, 717.7, 1046, 1102, 837.6, 464.9, 199.1, 79.61 },
    { 35.18, 36.45, 43.35, 69.2, 134.8, 242.6, 342.5, 359.6, 279.1, 165.7, 84.9, 48.57 },
    { 35.03, 35.28, 36.58, 41.49, 53.95, 74.4, 93.37, 96.6, 81.32, 59.81, 44.47, 37.57 },
    { 35, 35.03, 35.19, 35.77, 37.24, 39.67, 41.91, 42.3, 40.49, 37.94, 36.12, 35.31 },
    { 35, 35, 35.01, 35.06, 35.17, 35.35, 35.51, 35.54, 35.41, 35.22, 35.08, 35.02 },
}, {
    { 50.09, 50.26, 50.64, 51.28, 52.15, 53.03, 53.58, 53.54, 52.94, 52.04, 51.18, 50.58 },
    { 50.32, 50.91, 52.18, 54.38, 57.38, 60.41, 62.3, 62.17, 60.08, 57, 54.07, 51.98 },
    { 50.94, 52.68, 56.43, 62.94, 71.78, 80.72, 86.29, 85.9, 79.75, 70.65, 62, 55.84 },
    { 52.37, 56.8, 66.31, 82.8, 105.2, 127.9, 142, 141, 125.4, 102.4, 80.43, 64.81 },
    { 55.17, 64.81, 85.55, 121.5, 170.4, 219.7, 250.5, 248.4, 214.4, 164.1, 116.3, 82.28 },
    { 59.68, 77.73, 116.6, 183.9, 275.4, 367.9, 425.5, 421.5, 357.9, 263.7, 174.2, 110.5 },
    { 65.57, 94.64, 157.2, 265.5, 412.8, 561.7, 654.4, 648, 545.5, 393.9, 249.9, 147.3 },
    { 71.54, 111.7, 198.2, 348, 551.9, 757.8, 886.1, 877.2, 735.5, 525.7, 326.5, 184.6 },
    { 75.61, 123.4, 226.2, 404.3, 646.7, 891.5, 1044, 1033, 864.9, 615.5, 378.7, 210 },
    { 76.17, 125, 230.1, 412, 659.6, 909.8, 1066, 1055, 882.6, 627.8, 385.9, 213.5 },
    { 72.98, 115.9, 208.1, 367.9, 585.3, 805, 941.9, 932.4, 781.1, 557.4, 344.9, 193.6 },
    { 67.34, 99.71, 169.3, 289.9, 454, 619.8, 723.1, 715.9, 601.8, 432.9, 272.6, 158.4 },
    { 61.25, 82.24, 127.4, 205.6, 312, 419.6, 486.5, 481.9, 407.9, 298.4, 194.4, 120.3 },
    { 56.27, 67.97, 93.14, 136.7, 196.1, 256, 293.3, 290.7, 249.5, 188.4, 130.5, 89.17 },
    { 53, 58.61, 70.67, 91.55, 120, 148.7, 166.6, 165.3, 145.6, 116.3, 88.55, 68.77 },
    { 51.24, 53.54, 58.51, 67.11, 78.81, 90.63, 98, 97.48, 89.35, 77.31, 65.87, 57.73 },
}, {
    { 83.39, 91.07, 99.77, 108.6, 116.5, 122.3, 124.9, 123.9, 119.5, 112.5, 104, 95.06 },
    { 91.32, 102.3, 114.8, 127.5, 138.8, 147, 150.7, 149.3, 143.1, 133, 120.8, 108 },
    { 101, 116, 133, 150.4, 165.8, 177.1, 182.2, 180.3, 171.7, 158, 141.2, 123.8 },
    { 112, 131.6, 153.9, 176.5, 196.7, 211.4, 218, 215.6, 204.4, 186.5, 164.6, 141.8 },
    { 123.6, 148.1, 175.9, 204.1, 229.3, 247.6, 255.9, 252.9, 238.9, 216.6, 189.2, 160.8 },
    { 134.9, 164.1, 197.1, 230.8, 260.8, 282.6, 292.6, 288.9, 272.3, 245.6, 213.1, 179.2 },
    { 144.6, 177.8, 215.4, 253.8, 288, 312.8, 324.1, 319.9, 301, 270.6, 233.6, 195 },
    { 151.5, 187.7, 228.6, 270.3, 307.5, 334.4, 346.8, 342.2, 321.7, 288.6, 248.3, 206.4 },
    { 154.9, 192.4, 235, 278.3, 316.9, 344.9, 357.7, 353, 331.7, 297.3, 255.5, 211.9 },
    { 154.2, 191.5, 233.7, 276.7, 315, 342.8, 355.5, 350.8, 329.6, 295.6, 254, 210.8 },
    { 149.6, 184.9, 224.9, 265.7, 302, 328.4, 340.4, 336, 315.9, 283.6, 244.2, 203.2 },
    { 141.6, 173.6, 209.8, 246.7, 279.6, 303.5, 314.4, 310.4, 292.2, 262.9, 227.3, 190.2 },
    { 131.3, 158.9, 190.3, 222.2, 250.7, 271.3, 280.7, 277.3, 261.5, 236.2, 205.4, 173.3 },
    { 119.8, 142.6, 168.5, 194.9, 218.4, 235.5, 243.3, 240.4, 227.4, 206.5, 181, 154.5 },
    { 108.2, 126.3, 146.7, 167.5, 186.1, 199.6, 205.7, 203.5, 193.2, 176.7, 156.6, 135.6 },
    { 97.59, 111.2, 126.6, 142.3, 156.3, 166.5, 171.1, 169.4, 161.7, 149.2, 134, 118.3 },
}, {
    { 115.7, 120.5, 124.8, 128.6, 131.4, 133.3, 133.9, 133.3, 131.6, 128.8, 125.2, 120.9 },
    { 120.6, 126, 131, 135.2, 138.5, 140.5, 141.3, 140.7, 138.7, 135.5, 131.4, 126.5 },
    { 125.4, 131.4, 137, 141.7, 145.4, 147.7, 148.5, 147.8, 145.6, 142.1, 137.4, 131.9 },
    { 129.9, 136.5, 142.6, 147.8, 151.8, 154.4, 155.3, 154.5, 152.1, 148.2, 143.1, 137.1 },
    { 133.9, 141.1, 147.7, 153.3, 157.6, 160.3, 161.3, 160.5, 157.9, 153.7, 148.2, 141.6 },
    { 137.3, 144.9, 151.9, 157.8, 162.4, 165.3, 166.4, 165.5, 162.7, 158.3, 152.4, 145.5 },
    { 139.8, 147.7, 155, 161.3, 166.1, 169.1, 170.2, 169.3, 166.4, 161.7, 155.6, 148.4 },
    { 141.4, 149.6, 157, 163.4, 168.4, 171.5, 172.6, 171.7, 168.7, 163.9, 157.6, 150.2 },
    { 142, 150.2, 157.8, 164.2, 169.2, 172.3, 173.5, 172.5, 169.5, 164.7, 158.3, 150.9 },
    { 141.5, 149.7, 157.2, 163.6, 168.5, 171.6, 172.8, 171.8, 168.8, 164, 157.7, 150.3 },
    { 140, 148, 155.3, 161.5, 166.3, 169.4, 170.5, 169.6, 166.7, 162, 155.8, 148.6 },
    { 137.5, 145.2, 152.2, 158.2, 162.8, 165.7, 166.8, 165.9, 163.1, 158.6, 152.7, 145.8 },
    { 134.2, 141.5, 148.1, 153.7, 158.1, 160.8, 161.8, 161, 158.4, 154.2, 148.6, 142 },
    { 130.3, 137, 143.1, 148.4, 152.4, 155, 155.9, 155.1, 152.7, 148.7, 143.6, 137.5 },
    { 125.8, 131.9, 137.5, 142.3, 146, 148.3, 149.1, 148.4, 146.2, 142.7, 138, 132.4 },
    { 121.1, 126.5, 131.5, 135.8, 139.1, 141.2, 142, 141.3, 139.3, 136.1, 131.9, 127 },
}
};

namespace camera = boost::units::camera;
namespace si = boost::units::si;

void check_naive_fitter( TestState& state )
{
    ost::DebugStream::set(std::cerr);
    Config config;
    config.negligible_x_step = 1E-5f * boost::units::si::nanometer;
    dStorm::traits::Zhuang3D threed;
    threed.widening[0] = 5.0 / (1E-6*si::meter);
    threed.widening[1] = 4.5 / (1E-6*si::meter);
    dStorm::engine::InputTraits traits;
    traits.depth_info = threed;
    dStorm::engine::JobInfo job_info( 4, 3000 * camera::ad_count, traits, 0 );

    traits.fluorophores[0].wavelength = 500E-9 * si::meter;

    dStorm::engine::Image::Size sz;
    sz.x() = 12 * boost::units::camera::pixel;
    sz.y() = 16 * boost::units::camera::pixel;
    sz.z() = 5 * boost::units::camera::pixel;
    traits.size = sz;

    dStorm::engine::Image image(sz);
    gsl_rng * r = gsl_rng_alloc (gsl_rng_taus);
    gsl_rng_set(r,50);

    for (int i = 0; i < 5; ++i) {
        while ( traits.plane_count() <= i ) 
            traits.planes.push_back( dStorm::traits::Optics<2>() );
        dStorm::traits::Optics<2>::Resolutions res;
        res[0] = ((85 + 3*i) * 1E-9 * boost::units::si::meter) / boost::units::camera::pixel;
        res[1] = ((75 + 3*i) * 1E-9 * boost::units::si::meter) / boost::units::camera::pixel;
        traits.plane(i).set_resolution( res );
        traits.plane(i).z_position = (150 - 100*i) * 1E-9 * boost::units::si::meter;
        traits.plane(i).set_fluorophore_transmission_coefficient(0, 1.0 - i * 0.1 );
        traits.plane(i).offsets[0] = -20E-9 * boost::units::si::meter;
        traits.plane(i).offsets[1] = 20E-9 * boost::units::si::meter;

        for (int y = 0; y < 16; ++y)
            for (int x = 0; x < 12; ++x)
                image(x,y,i) = round( data[i][y][x] + gsl_ran_gaussian(r, 10) );
    }
    traits.psf_size() = dStorm::engine::InputTraits::PSF::Constant( 100E-9f * si::meter );
    (*traits.psf_size())[0] = 150E-9 * si::meter;

    dStorm::engine::Spot spot( 6, 8 );

    for (int i = 0; i < 5; ++i) {
        Eigen::Matrix3f trafo = Eigen::Matrix3f::Identity();
        for (int y = 0; y < 2; ++y)
          for (int x = 0; x < 2; ++x)
            trafo(y,x) = ((y==x)?1.0:0.0) + (x*2*i-y*3*i) * 0.01;
        trafo(0,2) = -20E-9 * i;
        trafo(1,2) = 20E-9 * i;
        traits.plane(i).apply_transformation(trafo);
    }

    std::vector<dStorm::Localization> locs;
    int found = dStorm::guf::Fitter( job_info, config )
        .fitSpot( spot, image, dStorm::engine::spot_fitter::Implementation::iterator( boost::back_inserter(locs) ) );
    state( found == 1 );
    state( abs( locs[0].position().x() - 586E-9 * si::meter ) < 1E-8 * si::meter );
    state( abs( locs[0].position().y() - 700E-9 * si::meter ) < 1E-8 * si::meter );
    state( abs( locs[0].position().z() - 85E-9 * si::meter ) < 1E-8 * si::meter );
    state( abs( locs[0].amplitude() - 50000 * camera::ad_count ) < 1000 * camera::ad_count );
}
